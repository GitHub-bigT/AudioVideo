if (!self->is_yuv420p_buffer_init)
		{
			self->yuv420p_buffer = new uint8_t[width * height * 1.5];
			self->is_yuv420p_buffer_init = true;
		}
		memcpy(self->yuv420p_buffer, p_device_pbo->pbo[0]->pbo_addr, width * height);
		memcpy(self->yuv420p_buffer + width * height, p_device_pbo->pbo[1]->pbo_addr, width * height / 4);
		memcpy(self->yuv420p_buffer + width * height + width * height / 4, p_device_pbo->pbo[2]->pbo_addr, width * height / 4);

		//yuv420p to uyvy
		image_size = width * height * 2;
		*pp_image_source = new uint8_t[image_size];
		uint32_t* image_source_temp = (uint32_t*)*pp_image_source;
		uint8_t* p_y1 = self->yuv420p_buffer;
		uint8_t* p_y2 = self->yuv420p_buffer + 1;
		uint8_t* p_y3 = self->yuv420p_buffer + width;
		uint8_t* p_y4 = self->yuv420p_buffer + width + 1;
		uint8_t* p_u = self->yuv420p_buffer + width * height;
		uint8_t* p_v = self->yuv420p_buffer + width * height + width * height / 4;

		for (int i = 0; i < height; i += 2)
		{
			for (int j = 0; j < width * 2; j += 4)
			{
				//uint32_t a_pixel_odd = ((uint32_t)*p_u) | ((uint32_t)*p_y1) >> 8 | ((uint32_t)*p_v) >> 16 | ((uint32_t)*p_y2) >> 24;
				uint32_t a_pixel_odd = (uint32_t)*p_u << 32 | (uint32_t)*p_y1 << 24 | (uint32_t)*p_v << 16 | (uint32_t)*p_y2 << 8;
				int odd_index = i * width * 2 + j;
				image_source_temp[odd_index / 4] = a_pixel_odd;
				//uint32_t a_pixel_even = ((uint32_t)*p_u) | ((uint32_t)*p_y3) >> 8 | ((uint32_t)*p_v) >> 16 | ((uint32_t)*p_y4) >> 24;
				uint32_t a_pixel_even = (uint32_t)*p_u << 32 | (uint32_t)*p_y3 << 24 | (uint32_t)*p_v << 16 | (uint32_t)*p_y4 << 8;
				int even_index = (i + 1) * width * 2 + j;
				image_source_temp[even_index / 4] = a_pixel_even;
				p_u++;
				p_v++;
				p_y1 += 2;
				p_y2 += 2;
				p_y3 += 2;
				p_y4 += 2;
			}
			p_y1 += width;
			p_y2 += width;
			p_y3 += width;
			p_y4 += width;
		}
