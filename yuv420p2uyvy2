		if (!self->is_yuv420p_buffer_init)
		{
			self->yuv420p_buffer = new unsigned char[width * height * 1.5];
			self->is_yuv420p_buffer_init = true;
		}
		memcpy(self->yuv420p_buffer, p_device_pbo->pbo[0]->pbo_addr, width * height);
		memcpy(self->yuv420p_buffer + width * height, p_device_pbo->pbo[1]->pbo_addr, width * height / 4);
		memcpy(self->yuv420p_buffer + width * height + width * height / 4, p_device_pbo->pbo[2]->pbo_addr, width * height / 4);

		//yuv420p to uyvy
		image_size = width * height * 2;
		*pp_image_source = new unsigned char[image_size];
		//unsigned char* image_source_temp = *pp_image_source;

		/*for (int i = 0; i < width * height ; i++)
		{
			int y_index = 2 * i + 1;
			image_source_temp[y_index] = self->yuv420p_buffer[i];//y
		}*/

		
		MLT_TIMER start;
		timer_start(&start);
		int u_temp = 0;
		int y_temp = 0;

		for (int i = 0; i < height; i++)
		{
			for (int j = 0; j < width * 2; j += 4)
			{
				if (i % 2 == 0)
				{
					(*pp_image_source)[i * width * 2 + j] = self->yuv420p_buffer[u_temp + width * height];
					(*pp_image_source)[i * width * 2 + j + 2] = self->yuv420p_buffer[u_temp + width * height + width * height / 4];
					u_temp++;
				}
				else
				{
					(*pp_image_source)[i * width * 2 + j] = self->yuv420p_buffer[u_temp + width * height];
					(*pp_image_source)[i * width * 2 + j + 2] = self->yuv420p_buffer[u_temp + width * height + width * height / 4];
				}
				//y
				(*pp_image_source)[i * width * 2 + j + 1] = self->yuv420p_buffer[y_temp];
				(*pp_image_source)[i * width * 2 + j + 3] = self->yuv420p_buffer[y_temp + 1];
				y_temp += 2;
			}
		}

		int64_t test_time = timer_elapsed_msec(&start);
		FILE *fp = fopen("d:/VLC/aatime7_all_convert_time.txt", "a");
		fprintf(fp, "convert time:%d ms\n", test_time);
		//fwrite(image_source, 1, device_pbo->width * device_pbo->height * 2, fp);
		fclose(fp);
